import type { Meta, StoryObj } from '@storybook/react';
import CropVarietyInput from '../components/common/CropVarietyInput/CropVarietyInput';
import { useState } from 'react';
import { StandardCodeItem } from '../api/standardCodeService';
import { within, userEvent, expect } from '@storybook/test';

const meta: Meta<typeof CropVarietyInput> = {
  title: 'ÌåúÎûúÎî©/CropVarietyInput',
  component: CropVarietyInput,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: `
ÏûëÎ¨ºÍ≥º ÌíàÏ¢ÖÏùÑ ÏÑ†ÌÉùÌï† Ïàò ÏûàÎäî 2Îã®Í≥Ñ ÏûêÎèôÏôÑÏÑ± ÏûÖÎ†• Ïª¥Ìè¨ÎÑåÌä∏ÏûÖÎãàÎã§.

## Ï£ºÏöî Í∏∞Îä•
- üìù **ÏûëÎ¨º ÏûêÎèôÏôÑÏÑ±**: Í≥µÍ≥µÎç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏûëÎ¨º Í≤ÄÏÉâ
- üå± **ÌíàÏ¢Ö ÏûêÎèôÏôÑÏÑ±**: ÏÑ†ÌÉùÎêú ÏûëÎ¨ºÏóê Îî∞Î•∏ ÌíàÏ¢Ö Í≤ÄÏÉâ
- ‚å®Ô∏è **ÌÇ§Î≥¥Îìú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò**: ÌôîÏÇ¥Ìëú ÌÇ§Î°ú Ìï≠Î™© ÏÑ†ÌÉù
- üîÑ **2Îã®Í≥Ñ Ïó∞Îèô**: ÏûëÎ¨º ÏÑ†ÌÉù Ïãú ÌíàÏ¢Ö ÏûêÎèô Ï¥àÍ∏∞Ìôî
- üì± **Î∞òÏùëÌòï ÎîîÏûêÏù∏**: Î™®Î∞îÏùº ÏπúÌôîÏ†Å Ïä§ÌÉÄÏùº
- üé® **Î∏åÎûúÎî© Ïä§ÌÉÄÏùº**: ÌåúÎûúÎî© ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Ï†ÅÏö©

## ÏÇ¨Ïö© ÏòàÏãú
Î∏åÎûúÎî© ÌéòÏù¥ÏßÄÏóêÏÑú ÎÜçÏÇ∞Î¨º Ï†ïÎ≥¥ ÏûÖÎ†• Ïãú ÏÇ¨Ïö©Îê©ÎãàÎã§.
        `,
      },
    },
  },
  argTypes: {
    cropValue: {
      control: 'text',
      description: 'ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏûëÎ¨ºÎ™Ö',
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: "''" },
      },
    },
    varietyValue: {
      control: 'text',
      description: 'ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÌíàÏ¢ÖÎ™Ö',
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: "''" },
      },
    },
    disabled: {
      control: 'boolean',
      description: 'ÏûÖÎ†• ÎπÑÌôúÏÑ±Ìôî Ïó¨Î∂Ä',
      table: {
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' },
      },
    },
    onChange: {
      action: 'changed',
      description: 'ÏÑ†ÌÉù Î≥ÄÍ≤Ω Ïãú Ìò∏Ï∂úÎêòÎäî ÏΩúÎ∞± Ìï®Ïàò',
      table: {
        type: { 
          summary: '(data: CropVarietyData) => void',
          detail: `{
  cropCode: string;
  cropName: string;
  varietyCode: string;
  varietyName: string;
}`,
        },
      },
    },
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

// Í∏∞Î≥∏ Ïä§ÌÜ†Î¶¨
export const Default: Story = {
  args: {
    cropValue: '',
    varietyValue: '',
    disabled: false,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    // ÏûëÎ¨º ÏûÖÎ†• ÌïÑÎìú ÌôïÏù∏
    const cropInput = canvas.getByPlaceholderText('Ïòà: ÌÜ†ÎßàÌÜ†');
    await expect(cropInput).toBeInTheDocument();
    
    // ÌíàÏ¢Ö ÏûÖÎ†• ÌïÑÎìú ÌôïÏù∏ (ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú)
    const varietyInput = canvas.getByPlaceholderText('ÏûëÎ¨ºÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî');
    await expect(varietyInput).toBeInTheDocument();
    await expect(varietyInput).toBeDisabled();
  },
};

// ÏûëÎ¨º ÏÑ†ÌÉùÎêú ÏÉÅÌÉú
export const WithSelectedCrop: Story = {
  args: {
    cropValue: 'ÌÜ†ÎßàÌÜ†',
    varietyValue: '',
    disabled: false,
  },
  parameters: {
    docs: {
      description: {
        story: 'ÏûëÎ¨ºÏù¥ ÏÑ†ÌÉùÎêú ÏÉÅÌÉúÏûÖÎãàÎã§. Ïù¥Ï†ú ÌíàÏ¢ÖÏùÑ ÏÑ†ÌÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.',
      },
    },
  },
};

// ÏûëÎ¨ºÍ≥º ÌíàÏ¢Ö Î™®Îëê ÏÑ†ÌÉùÎêú ÏÉÅÌÉú
export const WithBothSelected: Story = {
  args: {
    cropValue: 'ÌÜ†ÎßàÌÜ†',
    varietyValue: 'Ïä§ÌÖåÎπÑÏïÑ ÌÜ†ÎßàÌÜ†',
    disabled: false,
  },
  parameters: {
    docs: {
      description: {
        story: 'ÏûëÎ¨ºÍ≥º ÌíàÏ¢ÖÏù¥ Î™®Îëê ÏÑ†ÌÉùÎêú ÏôÑÎ£å ÏÉÅÌÉúÏûÖÎãàÎã§.',
      },
    },
  },
};

// ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú
export const Disabled: Story = {
  args: {
    cropValue: '',
    varietyValue: '',
    disabled: true,
  },
  parameters: {
    docs: {
      description: {
        story: 'ÏûÖÎ†•Ïù¥ ÎπÑÌôúÏÑ±ÌôîÎêú ÏÉÅÌÉúÏûÖÎãàÎã§.',
      },
    },
  },
};

// Ïù∏ÌÑ∞ÎûôÏÖò ÌÖåÏä§Ìä∏
export const InteractionTest: Story = {
  args: {
    cropValue: '',
    varietyValue: '',
    disabled: false,
  },
  play: async ({ canvasElement, args }) => {
    const canvas = within(canvasElement);
    
    // ÏûëÎ¨º ÏûÖÎ†• ÌïÑÎìúÏóê Ìè¨Ïª§Ïä§
    const cropInput = canvas.getByPlaceholderText('Ïòà: ÌÜ†ÎßàÌÜ†');
    await userEvent.click(cropInput);
    
    // ÏûëÎ¨ºÎ™Ö ÏûÖÎ†•
    await userEvent.type(cropInput, 'ÌÜ†ÎßàÌÜ†');
    
    // Ïû†Ïãú ÎåÄÍ∏∞ (ÎîîÎ∞îÏö¥Ïä§)
    await new Promise(resolve => setTimeout(resolve, 400));
    
    // onChange ÏΩúÎ∞±Ïù¥ Ìò∏Ï∂úÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    await expect(args.onChange).toHaveBeenCalled();
  },
};

// ÏóêÎü¨ Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏
export const ErrorHandling: Story = {
  args: {
    cropValue: '',
    varietyValue: '',
    disabled: false,
  },
  parameters: {
    docs: {
      description: {
        story: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Îì±Ïùò ÏÉÅÌô©ÏóêÏÑúÎèÑ ÏïàÏ†ïÏ†ÅÏúºÎ°ú ÎèôÏûëÌï©ÎãàÎã§.',
      },
    },
  },
};

// Î∞òÏùëÌòï ÌÖåÏä§Ìä∏ (Î™®Î∞îÏùº)
export const Mobile: Story = {
  args: {
    cropValue: '',
    varietyValue: '',
    disabled: false,
  },
  parameters: {
    viewport: {
      defaultViewport: 'mobile1',
    },
    docs: {
      description: {
        story: 'Î™®Î∞îÏùº ÌôîÎ©¥ÏóêÏÑúÏùò ÎèôÏûëÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
      },
    },
  },
};

// ÌÇ§Î≥¥Îìú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌÖåÏä§Ìä∏
export const KeyboardNavigation: Story = {
  args: {
    cropValue: '',
    varietyValue: '',
    disabled: false,
  },
  parameters: {
    docs: {
      description: {
        story: `
ÌÇ§Î≥¥ÎìúÎßåÏúºÎ°ú Ï°∞ÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§:
- **Tab**: ÌïÑÎìú Í∞Ñ Ïù¥Îèô
- **‚Üë/‚Üì**: ÎìúÎ°≠Îã§Ïö¥ Ìï≠Î™© ÏÑ†ÌÉù
- **Enter**: ÏÑ†ÌÉùÎêú Ìï≠Î™© ÌôïÏ†ï
- **Esc**: ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
        `,
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    // TabÏúºÎ°ú ÏûëÎ¨º ÏûÖÎ†• ÌïÑÎìúÎ°ú Ïù¥Îèô
    await userEvent.tab();
    
    // ÏûëÎ¨ºÎ™Ö ÏûÖÎ†•
    await userEvent.type(canvas.getByPlaceholderText('Ïòà: ÌÜ†ÎßàÌÜ†'), 'Î∞∞');
    
    // Ïû†Ïãú ÎåÄÍ∏∞
    await new Promise(resolve => setTimeout(resolve, 400));
    
    // ÌÇ§Î≥¥ÎìúÎ°ú ÏÑ†ÌÉù
    await userEvent.keyboard('{ArrowDown}');
    await userEvent.keyboard('{Enter}');
  },
}; 